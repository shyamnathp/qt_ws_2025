cmake_minimum_required(VERSION 3.16)

set(CMAKE_CXX_STANDARD 17)

project(Test)

find_package (Python3 COMPONENTS Development REQUIRED)

# The name of the generated bindings module (as imported in Python).
set(bindings_library "Test")


# Specify which C++ files will be generated by shiboken. This includes the
# module wrapper and a '.cpp' file per C++ type. These are needed for
# generating the module shared library.
set(generated_sources
    ${CMAKE_CURRENT_BINARY_DIR}/Test/test_wrapper.cpp
    # module is always needed
    ${CMAKE_CURRENT_BINARY_DIR}/Test/test_module_wrapper.cpp)


# The typesystem xml file which defines the relationships between the C++
# types / functions and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/test_typesystem.xml)

# The header file with all the types and functions for which bindings will be generated.
set(wrapped_headers
    /home/shyamnath/Shyam/presentations/qt_ws_2025/sbk_wizard_test/sample.h)

# The Include paths for shiboken6.
set(includes "")
foreach(include_dir /home/shyamnath/Shyam/presentations/qt_ws_2025/sbk_wizard_test)
    list(APPEND includes "-I${include_dir}")
endforeach()

# ====================== Shiboken target for generating binding C++ files  ====================

# Set up the options to pass to shiboken.
set(shiboken_options
--avoid-protected-hack --use-global-header --enable-parent-ctor-heuristic --enable-return-value-heuristic --use-isnull-as-nb_nonzero
--generator-set=shiboken --enable-parent-ctor-heuristic
--enable-return-value-heuristic --use-isnull-as-nb_nonzero
--avoid-protected-hack
${includes}
-I${CMAKE_SOURCE_DIR}
-T${CMAKE_SOURCE_DIR}
--output-directory=${CMAKE_CURRENT_BINARY_DIR})


# Specify which sources will be generated by shiboken, and their dependencies.

set(generated_sources_dependencies ${wrapped_headers} ${typesystem_file})

# Add custom target to run shiboken.
add_custom_command(OUTPUT ${generated_sources}
                   COMMAND shiboken6
                   ${shiboken_options} ${wrapped_headers} ${typesystem_file}
                   DEPENDS ${generated_sources_dependencies}
                   IMPLICIT_DEPENDS CXX ${wrapped_headers}
                   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                   COMMENT "Running generator for ${typesystem_file}.")

# ======================= CMake target - bindings_library =====================

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${generated_sources})

# Needed mostly on Windows to export symbols, and create a .lib file, otherwise
# the binding library can't link to the sample library.
target_compile_definitions(${bindings_library} PRIVATE BINDINGS_BUILD)

target_include_directories(${bindings_library} PRIVATE
    ${Python3_INCLUDE_DIRS}
    /home/shyamnath/Shyam/presentations/qt_ws_2025/sbk_wizard_test
    /home/shyamnath/Shyam/presentations/qt_ws_2025/sbk_wizard_test/venv/lib/python3.11/site-packages/shiboken6_generator/include
)

target_link_directories(${bindings_library} PRIVATE
    /home/shyamnath/Shyam/presentations/qt_ws_2025/sbk_wizard_test/build/lib
    ${Python3_LIBRARY_DIRS}
)

target_link_libraries(${bindings_library} PRIVATE
    ${Python3_LIBRARIES}
    simple
    /home/shyamnath/Shyam/presentations/qt_ws_2025/sbk_wizard_test/venv/lib/python3.11/site-packages/shiboken6/libshiboken6.abi3.so.6.9
)


# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")
if(WIN32)
    set_property(TARGET ${bindings_library} PROPERTY SUFFIX ".pyd")
endif()
